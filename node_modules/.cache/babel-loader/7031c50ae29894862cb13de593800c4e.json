{"ast":null,"code":"var _jsxFileName = \"/Users/fangrongling/Desktop/youtube_uio/src/VideoList.jsx\";\nimport React, { Component } from 'react';\n\nclass VideoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videos: [],\n      isToggleOn: true,\n      dispaly: 'block',\n      clickedVideo: \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  /*componentWillUpdate(){\n      let videos = this.state.videos;\n      this.props.videos.map(video =>{\n          videos = videos.concat(Object.assign({}, video, {dispaly: \"block\", isToggleOn: true}));\n          this.setState({videos});\n      })\n      console.log(\"1\")\n  }*/\n\n\n  handleClick(e, video) {\n    console.log(e);\n    /*let videos = this.state.videos;\n    if (videos.length) {\n        videos.map(v => {\n          if (v === video) {\n              if(v.isToggleOn){\n                v.display = 'none';\n              }else{\n                v.display = 'block';                      \n              }\n              v.isToggleOn = !v.isToggleOn;\n          }\n        })\n    }*/\n\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn,\n      display: prevState.isToggleOn ? 'none' : 'block',\n      clickedVideo: e.id.videoId\n    }));\n  }\n\n  render() {\n    let exit = false;\n    return React.createElement(\"div\", {\n      className: \"VideoList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, (console.log(this.state.videos), this.state.videos.map(video => (console.log(this.state.videos.length), React.createElement(VidoeListItem, {\n      video: video,\n      handleClick: () => this.handleClick(video),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst VidoeListItem = ({\n  video,\n  handleClick\n}) => {\n  let imageUrl = video.snippet.thumbnails.medium.url;\n  let title = video.snippet.title;\n  let time = video.snippet.publishedAt;\n  let videoUrl = \"https://www.youtube.com/embed/\" + video.id.videoId;\n  title = title.replace(/&quot;/g, ' ');\n  return React.createElement(\"div\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, this.state.isToggleOn ? [React.createElement(\"img\", {\n    src: imageUrl,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, title), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, time)] : React.createElement(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: videoUrl,\n    frameborder: \"0\",\n    allow: \"autoplay; encrypted-media\",\n    allowfullscreen: true,\n    style: {\n      display: display\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nexport default VideoList; //style={{display: display}}","map":{"version":3,"sources":["/Users/fangrongling/Desktop/youtube_uio/src/VideoList.jsx"],"names":["React","Component","VideoList","constructor","props","state","videos","isToggleOn","dispaly","clickedVideo","handleClick","bind","e","video","console","log","setState","prevState","display","id","videoId","render","exit","map","length","VidoeListItem","imageUrl","snippet","thumbnails","medium","url","title","time","publishedAt","videoUrl","replace"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAiC;AAC7BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,UAAU,EAAE,IAFD;AAGXC,MAAAA,OAAO,EAAE,OAHE;AAIXC,MAAAA,YAAY,EAAE;AAJH,KAAb;AAMA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;AAED;;;;;;;;;;AASAD,EAAAA,WAAW,CAACE,CAAD,EAAIC,KAAJ,EAAW;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACA;;;;;;;;;;;;;;AAaA,SAAKI,QAAL,CAAcC,SAAS,KAAK;AAC1BV,MAAAA,UAAU,EAAE,CAACU,SAAS,CAACV,UADG;AAE1BW,MAAAA,OAAO,EAAED,SAAS,CAACV,UAAV,GAAuB,MAAvB,GAA+B,OAFd;AAG1BE,MAAAA,YAAY,EAAEG,CAAC,CAACO,EAAF,CAAKC;AAHO,KAAL,CAAvB;AAKH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIC,IAAI,GAAG,KAAX;AACA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAECR,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,MAAvB,GACG,KAAKD,KAAL,CAAWC,MAAX,CAAkBiB,GAAlB,CAAsBV,KAAK,KACvBC,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,MAAX,CAAkBkB,MAA9B,GACA,oBAAC,aAAD;AACI,MAAA,KAAK,EAAEX,KADX;AAEI,MAAA,WAAW,EAAE,MAAM,KAAKH,WAAL,CAAiBG,KAAjB,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFuB,CAA3B,CAHJ,EADJ;AAcH;;AA3D4B;;AA+D/B,MAAMY,aAAa,GAAG,CAAC;AAACZ,EAAAA,KAAD;AAASH,EAAAA;AAAT,CAAD,KAA0B;AAC9C,MAAIgB,QAAQ,GAAGb,KAAK,CAACc,OAAN,CAAcC,UAAd,CAAyBC,MAAzB,CAAgCC,GAA/C;AACA,MAAIC,KAAK,GAAGlB,KAAK,CAACc,OAAN,CAAcI,KAA1B;AACA,MAAIC,IAAI,GAAGnB,KAAK,CAACc,OAAN,CAAcM,WAAzB;AACA,MAAIC,QAAQ,GAAG,mCAAiCrB,KAAK,CAACM,EAAN,CAASC,OAAzD;AACAW,EAAAA,KAAK,GAAGA,KAAK,CAACI,OAAN,CAAc,SAAd,EAAyB,GAAzB,CAAR;AACA,SACI;AAAK,IAAA,OAAO,EAAEzB,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,KAAKL,KAAL,CAAWE,UAAX,GAAwB,CACrB;AAAK,IAAA,GAAG,EAAEmB,QAAV;AAAqB,IAAA,GAAG,EAAC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADqB,EAErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIK,KAAJ,CAFqB,EAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CAHqB,CAAxB,GAIG;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAoB,IAAA,MAAM,EAAC,KAA3B;AAAiC,IAAA,GAAG,EAAEE,QAAtC;AAAgD,IAAA,WAAW,EAAC,GAA5D;AAAgE,IAAA,KAAK,EAAC,2BAAtE;AAAkG,IAAA,eAAe,MAAjH;AAAkH,IAAA,KAAK,EAAE;AAAChB,MAAAA,OAAO,EAAEA;AAAV,KAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CADJ;AAUD,CAhBD;;AAkBA,eAAehB,SAAf,C,CAEA","sourcesContent":["import React,{ Component} from 'react';\n\nclass VideoList extends Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        videos: [],\n        isToggleOn: true,\n        dispaly: 'block',\n        clickedVideo: \"\",\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n\n    /*componentWillUpdate(){\n        let videos = this.state.videos;\n        this.props.videos.map(video =>{\n            videos = videos.concat(Object.assign({}, video, {dispaly: \"block\", isToggleOn: true}));\n            this.setState({videos});\n        })\n        console.log(\"1\")\n    }*/\n   \n    handleClick(e, video) {\n        console.log(e);\n        /*let videos = this.state.videos;\n        if (videos.length) {\n            videos.map(v => {\n              if (v === video) {\n                  if(v.isToggleOn){\n                    v.display = 'none';\n                  }else{\n                    v.display = 'block';                      \n                  }\n                  v.isToggleOn = !v.isToggleOn;\n              }\n            })\n        }*/\n        this.setState(prevState => ({\n          isToggleOn: !prevState.isToggleOn,\n          display: prevState.isToggleOn ? 'none': 'block',\n          clickedVideo: e.id.videoId\n        }));\n    }\n\n    render(){\n        let exit = false;  \n        return (\n            <div className=\"VideoList\">\n            \n            {console.log(this.state.videos),\n                this.state.videos.map(video => (\n                    console.log(this.state.videos.length),\n                    <VidoeListItem \n                        video={video}\n                        handleClick={() => this.handleClick(video)}\n                    />\n                ))\n            }\n            </div>\n        );\n    }\n   \n  }\n\n  const VidoeListItem = ({video,  handleClick}) =>{\n    let imageUrl = video.snippet.thumbnails.medium.url;\n    let title = video.snippet.title;\n    let time = video.snippet.publishedAt;\n    let videoUrl = \"https://www.youtube.com/embed/\"+video.id.videoId\n    title = title.replace(/&quot;/g, ' ');\n    return(\n        <div onClick={handleClick}>\n            {this.state.isToggleOn ? [\n                <img src={imageUrl}  alt=\"\" />,\n                <p>{title}</p>,\n                <p>{time}</p>]:\n                <iframe width=\"560\" height=\"315\" src={videoUrl} frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen style={{display: display}}></iframe>\n            }\n        </div>\n    );\n  }\n  \n  export default VideoList;\n\n  //style={{display: display}}"]},"metadata":{},"sourceType":"module"}